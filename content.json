{"meta":{"title":"👩🏻‍💻","subtitle":null,"description":null,"author":"🤡Ling","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-08-13T03:00:16.790Z","updated":"2019-08-13T03:00:16.790Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-08-13T02:59:27.802Z","updated":"2019-08-13T02:59:27.802Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"ReactNative踩坑记录（一）环境配置问题","slug":"ReactNative-1","date":"2018-06-01T02:33:40.000Z","updated":"2019-08-13T07:50:27.616Z","comments":true,"path":"2018/06/01/ReactNative-1/","link":"","permalink":"http://yoursite.com/2018/06/01/ReactNative-1/","excerpt":"&emsp;&emsp;学了一点点React皮毛的我决定尝试下一下React Native :)","text":"&emsp;&emsp;学了一点点React皮毛的我决定尝试下一下React Native :) &emsp;&emsp;明明很简单的配置，到我这里却各种出错，一路踩坑过来的我总算把ios环境配置好了。基础配置可以跟着官网配置环境来，上面写的很详细了。 我就分享一下我遇到的问题和解决方法： React Native run-ios 的问题 ReactNative 创建项目的时候没有权限&emsp;&emsp;错误信息: EACCES: permission denied, open ‘/Users/apple/.babel.json’&emsp;&emsp;这种属于权限Mac的权限问题解决方法：&emsp;&emsp;&emsp;&emsp;sudo chmod -R 777 /Users/apple/.babel.json&emsp;&emsp;然后删除项目重新init新的项目：&emsp;&emsp;&emsp;&emsp;react-native init awesome-project 安装watchman的问题&emsp;&emsp;&emsp;个人建议用最新的Xcode版本，因为我不想更新Xcode，觉得太大了，太占内存（贫穷的我用的是Air）就没有更新，结果watchman安装还报错，所以建议先更新Xcode吧，省事。 ReactNative run-ios 报错&emsp;&emsp;错误信息: Permission denied. Make sure watchman is running for this project.&emsp;&emsp;这个是因为init命令默认会创建最新的版本，而目前最新的0.45及以上版本需要下载boost等几个第三方库编译。这些库在国内即便翻墙也很难下载成功，导致无法运行iOS项目。我没有对新版本的需求，所以我暂时创建的是0.44.3的版本，把之前的项目删除，重新创建项目：&emsp;&emsp;&emsp;&emsp;react-native init awesome-project –version 0.44.3 等我安装了 AndroidStudio 再更新 run-andriod 的问题吧 :)","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"},{"name":"React Native","slug":"React-Native","permalink":"http://yoursite.com/tags/React-Native/"}]},{"title":"JS对数组去重的几种方法","slug":"JS对数组去重的几种方法","date":"2018-04-22T14:11:49.000Z","updated":"2019-08-13T07:51:42.692Z","comments":true,"path":"2018/04/22/JS对数组去重的几种方法/","link":"","permalink":"http://yoursite.com/2018/04/22/JS对数组去重的几种方法/","excerpt":"&emsp;面试经常问的一道题&emsp;JS对数组去重的几种方法 (前面六种方法是普通数组，最后一种是对象数组)","text":"&emsp;面试经常问的一道题&emsp;JS对数组去重的几种方法 (前面六种方法是普通数组，最后一种是对象数组) 方法一： 最原始的方法，定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中。 1234567891011121314var arr = [ 1, 1, '1', '1'];function uniqueArr(oldArr) &#123; // 新的数组 用来存放去重后的值 var newArr = []; for (var i = 0; i &lt; oldArr.length ;i++) &#123; for (var j = 0 ; j &lt; newArr.length; j++) // 如果两数相等 则跳出第二个循环 if (oldArr[i] === newArr[j]) break; // 一轮循环结束还没跳出循环 则表示此数未再新数组里出现 则加入新数组 if (j == newArr.length) newArr.push(oldArr[i]); &#125; return newArr;&#125;console.log(uniqueArr(arr)); // [ 1, '1' ] 方法二： 先将数组排序，再相邻的进行比较，不同的存入新数组。（这个方法有缺陷，因为sort是按照字符编码的顺序进行排序，所以要先将数组的元素转换为字符串，来进行比较，下面的数组的这种情况就不能完美的去重。 个人认为sort方法是通过交换实现的排序，在数据量比较小的时候用的是冒泡排序，数据量比较大时用的是快速排序） 1234567891011var arr = [ 1, 1, '1', '1', 1];function uniqueArr(oldArr) &#123; oldArr = oldArr.sort(); var newArr = []; for (var i = 0 ; i &lt; oldArr.length ; i++) &#123; if(oldArr[i] !== newArr[newArr.length-1]) newArr.push(oldArr[i]); &#125; return newArr;&#125;console.log(uniqueArr(arr)); // [ 1, '1', 1 ] 方法三： 利用数组的indexOf下标属性来简化循环 (includes 也是一样的) 12345678910var arr = [ 1, 1, '1', '1', 1];function uniqueArr(oldArr) &#123; var newArr = []; for (var i = 0 ; i &lt; oldArr.length ; i++) // 利用indexof 判断某个值是否在新的数组里面 if(newArr.indexOf(oldArr[i]) === -1) newArr.push(oldArr[i]); return newArr;&#125;console.log(uniqueArr(arr)); // [ 1, '1' ] 方法四： 利用ES6的 filter 方法 加上indexOf 返回第一个item出现的位置 123456789var arr = [ 1, 1, '1', '1', 1, '2'];function uniqueArr(oldArr) &#123; var newArr = oldArr.filter(function(item, index, oldArr)&#123; // indexOf 返回第一个item出现的位置 return oldArr.indexOf(item) === index; &#125;) return newArr;&#125;console.log(uniqueArr(arr)); // [ 1, '1', '2' ] 方法五： 利用对象属性存在的特性，如果没有该属性则存入新数组 (这里的 1 和 ‘1’ 在用obj[]添加属性时，会被自动换成 1 然后加入进obj) 1234567891011121314var arr = [ 1, 1, '1', '1', 1, '2'];function uniqueArr(oldArr) &#123; var newArr = []; var obj = &#123;&#125;; for(var i=0; i&lt;oldArr.length; i++)&#123; if( !obj[oldArr[i]] )&#123; // 属性不存在 则加入新数组 并将该属性变为 1 obj[oldArr[i]] = 1; newArr.push(oldArr[i]); &#125; &#125; return newArr;&#125;console.log(uniqueArr(arr)); // [ 1, '2' ] 方法六：利用ES6的 set 对象自动去重 12345var arr = [ 1, 1, '1', '1', 1];function uniqueArr(arr) &#123; return Array.from(new Set(arr)); // 利用Array.from 将Set结构转换为数组&#125;console.log(uniqueArr(arr)); // [ 1, '1' ] Object键值对去重 123456789var arr = [&#123;value: 1&#125;, &#123;value: 1&#125;, &#123;value: 2&#125;];function uniqueArr(oldArr) &#123; var obj = &#123;&#125;; return oldArr.filter(function(item, index, oldArr)&#123; // 判断 obj 对象是否存在item这个属性 存在的话返回fasle 不存在的话 向Obj中添加该属性 return obj.hasOwnProperty(typeof item + JSON.stringify(item)) ? false : (obj[typeof item + JSON.stringify(item)] = true) &#125;)&#125;console.log(uniqueArr(arr)); // [&#123;value: 1&#125;, &#123;value: 2&#125;]","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"排序算法","slug":"排序算法","date":"2018-04-19T15:14:27.000Z","updated":"2019-08-13T08:03:34.683Z","comments":true,"path":"2018/04/19/排序算法/","link":"","permalink":"http://yoursite.com/2018/04/19/排序算法/","excerpt":"","text":"交换类排序&emsp;&emsp;交换排序的基本方法是：通过一系列的交换元素过程，把原本逆序的元素交换为正确的顺序的排序方法。常见的冒泡排序和快速排序就属于交换类排序。 冒泡排序&emsp;&emsp;冒泡排序（英语：Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来（这里的顺序错误指的是两个元素没有按照你想排的顺序）。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。 &emsp;&emsp;&emsp;优点： 简单稳定 &emsp;&emsp;&emsp;缺点： 效率不高，慢（一次只能移动相邻两个数据） &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最坏时间复杂度： O(𝒏²) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最优时间复杂度： O(𝒏) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;平均时间复杂度： O(𝒏²) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;空间复杂度： 总共 O(𝒏) &emsp;&emsp;冒泡排序算法的运作如下： &emsp;&emsp;&emsp;&emsp;1. 从第一个元素开始，比较相邻的元素。如果第一个比第二个大，就交换他们两个。 &emsp;&emsp;&emsp;&emsp;2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数，将数列长度减一，再针对所有的元素重复以上的步骤 。 &emsp;&emsp;&emsp;&emsp;3. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 123456789101112// JS代码实现：Array.prototype.bubble_sort = function() &#123; // 为Array添加一个方法 var temp; // 交换两个数暂时存放用 for (var i = 0; i &lt; this.length - 1; i++) for (var j = 0; j &lt; this.length - 1 - i; j++) if (this[j] &gt; this[j + 1]) &#123; temp = this[j]; this[j] = this[j + 1]; this[j + 1] = temp; // 顺序不同的 交换两个数的位置 &#125; return this; &#125;; 快速排序&emsp;&emsp;快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），简称快排，是冒泡排序的改进版。 &emsp;&emsp;&emsp;优点： 极快，快速排序是目前已知的最快的排序方法，数据移动少 &emsp;&emsp;&emsp;缺点： 不稳定 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最坏时间复杂度： O(𝒏²) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最优时间复杂度： O(𝒏log𝒏) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;平均时间复杂度： O(𝒏log𝒏) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;空间复杂度： 实现的方式不同空间复杂度也不同 &emsp;&emsp;快速排序算法的运作如下： &emsp;&emsp;&emsp;&emsp;1. 从数列中挑出一个元素，称为”基准”（pivot）。 &emsp;&emsp;&emsp;&emsp;2. 重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作 。 &emsp;&emsp;&emsp;&emsp;3. 针对所有的元素重复以上的步骤，除了最后一个 。 &emsp;&emsp;&emsp;&emsp;4. 递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。 图1.2-1 快速排序的过程 1234567891011121314151617// JS代码实现：Array.prototype.quick_sort = function() &#123; var len = this.length; if (len &lt;= 1) // 判断数组此时的长度 小于等于1时 返回最后一个数 return this.slice(0); var left = []; var right = []; var mid = [this[0]]; // 分别将小于mid的放入左边和右边 for (var i = 1; i &lt; len; i++) if (this[i] &lt; mid[0]) left.push(this[i]); else right.push(this[i]); // 利用递归 不断交换 return left.quick_sort().concat(mid.concat(right.quick_sort()));&#125;; 选择排序&emsp;&emsp;选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对 𝒏 个元素的表进行排序总共进行至多 𝒏 − 1 次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。 &emsp;&emsp;&emsp;优点： 移动数据的次数已知 （n-1）次 &emsp;&emsp;&emsp;缺点： 比较次数多 &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最坏时间复杂度： O(𝒏²) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最优时间复杂度： O(𝒏²) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;平均时间复杂度： O(𝒏²) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;空间复杂度： O(𝒏) 图2-1 选择排序的过程 1234567891011121314// JS代码实现 Array.prototype.selection_sort = function() &#123; var min; var temp; for (var i = 0; i &lt; this.length - 1; i++) &#123; min = i; for (var j = i + 1; j &lt; this.length; j++) if (this[min] &gt; this[j]) min = j; temp = this[min]; this[min] = this[i]; this[i] = temp; &#125; &#125;; 插入排序&emsp;&emsp;插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。 &emsp;&emsp;&emsp;优点： 稳定，快&emsp;&emsp;&emsp;缺点： 比较次数不一定，比较次数越少，插入点后的数据移动越多，特别是当数据总量庞大的时候 。&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最坏时间复杂度： O(𝒏²)&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最优时间复杂度： O(𝒏)&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;平均时间复杂度： O(𝒏²)&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;空间复杂度： 总共 O(𝒏) 需要辅助空间 O(1) &emsp;&emsp;插入排序算法的运作如下：&emsp;&emsp;&emsp;&emsp;1. 从第一个元素开始，该元素可以认为已经被排序&emsp;&emsp;&emsp;&emsp;2. 取出下一个元素，在已经排序的元素序列中从后向前扫描&emsp;&emsp;&emsp;&emsp;3. 如果该元素（已排序）大于新元素，将该元素移到下一位置&emsp;&emsp;&emsp;&emsp;4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置&emsp;&emsp;&emsp;&emsp;5. 将新元素插入到该位置后&emsp;&emsp;&emsp;&emsp;6. 重复步骤2~5 图3-1 插入排序的过程 1234567891011// JS代码实现Array.prototype.insertion_sort = function() &#123; for(var i = 1;i &lt; this.length; i++) for(var j = 0; j &lt; i ; j++) if(this[j] &gt; this[i]) &#123; this.splice(j,0,this[i]); // 往前插入 this.splice(i+1,1); // 删除之前的那个数字 &#125; return this;&#125;; 归并排序&emsp;&emsp;归并排序（英语：Merge sort）是创建在归并操作上的一种有效的排序算法，是采用分治法的一个非常典型的应用，且各层分治递归可以同时进行。 &emsp;&emsp;&emsp;优点： 效率高，稳定&emsp;&emsp;&emsp;缺点： 空间复杂度略高&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最坏时间复杂度： O(𝒏log𝒏)&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最优时间复杂度： O(𝒏)&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;平均时间复杂度： O(𝒏log𝒏)&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;空间复杂度： 总共 O(𝒏) &emsp;&emsp;归并排序算法的运作如下：&emsp;&emsp;递归法:&emsp;&emsp;&emsp;&emsp;1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列&emsp;&emsp;&emsp;&emsp;2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置&emsp;&emsp;&emsp;&emsp;3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置&emsp;&emsp;&emsp;&emsp;4. 重复步骤3直到某一指针到达序列尾&emsp;&emsp;&emsp;&emsp;5. 将另一序列剩下的所有元素直接复制到合并序列尾 &emsp;&emsp;迭代法:&emsp;&emsp;原理如下（假设序列共有 n 个元素）：&emsp;&emsp;&emsp;&emsp;1. 将序列每相邻两个数字进行归并操作，形成 ceil(n/2) 个序列，排序后每个序列包含两/一个元素&emsp;&emsp;&emsp;&emsp;2. 若此时序列数不是1个则将上述序列再次归并，形成 ceil(n/4) 个序列，每个序列包含四/三个元素&emsp;&emsp;&emsp;&emsp;3. 重复步骤2，直到所有元素排序完毕，即序列数为1 图4-1 归并排序的过程 12345678910111213// JS代码实现Array.prototype.merge_sort = function() &#123; var merge = function(left, right) &#123; var final = []; while (left.length &amp;&amp; right.length) final.push(left[0] &lt;= right[0] ? left.shift() : right.shift()); return final.concat(left.concat(right)); &#125;; var len = this.length; if (len &lt; 2) return this; var mid = len / 2; return merge(this.slice(0, parseInt(mid)).merge_sort(), this.slice(parseInt(mid)).merge_sort());&#125;;","categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/tags/Algorithm/"}]},{"title":"完整的URL请求页面过程","slug":"完整的URL请求页面过程","date":"2018-04-18T09:15:29.000Z","updated":"2019-08-13T07:48:25.533Z","comments":true,"path":"2018/04/18/完整的URL请求页面过程/","link":"","permalink":"http://yoursite.com/2018/04/18/完整的URL请求页面过程/","excerpt":"&emsp;&emsp;当我们在网页浏览器（Web browser）的地址栏中输入URL时，Web页面是如何呈现的？就让我们来聊聊从用户输入到页面加载完成的过程中都发生了什么事情。","text":"&emsp;&emsp;当我们在网页浏览器（Web browser）的地址栏中输入URL时，Web页面是如何呈现的？就让我们来聊聊从用户输入到页面加载完成的过程中都发生了什么事情。 请求过程简介用户输入URL大概发生了以下一些事： (1) DNS域名解析到对应的IP地址； (2) 浏览器向Web服务器发送一个HTTP请求； (3) 服务器的永久重定向响应; (4) 浏览器跟踪重定向地址; (5) 服务器处理请求，并返回一个HTTP响应; (6) 浏览器显示HTML; 请求过程详解DNS查找IP地址&emsp;&emsp;DNS是域名系统（Domain Name System）的缩写，是因特网的一项核心服务，是和HTTP协议位于应用层的协议，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。 (一) DNS 查找过程 浏览器缓存 – 浏览器会缓存DNS记录一段时间，但是操作系统并没有告诉浏览器储存DNS记录的时间，这样不同浏览器会储存个自固定的一个时间（2分钟到30分钟不等）。 系统缓存 – 如果在浏览器缓存里没有找到需要的记录，浏览器会做一个系统调用（windows里是gethostbyname），这样便可获得系统缓存中的记录。 路由器缓存 – 接着，前面的查询请求发向路由器，它一般会有自己的DNS缓存。 ISP DNS缓存 – 接下来要check的就是ISP缓存DNS的服务器。在这一般都能找到相应的缓存记录。 递归搜索 – 你的ISP的DNS服务器从跟域名服务器开始进行递归搜索，从.com顶级域名服务器到example的域名服务器。一般DNS服务器的缓存中会有.com域名服务器中的域名，所以到顶级服务器的匹配过程不是那么必要了。 (二) DNS进行域名解析的过程 客户端发出 DNS 请求翻译 IP 地址或主机名； DNS 服务器在收到客户端的请求后，检查 DNS 服务器的缓存，若查到请求的地址或名字，即向客户端发出应答信息； 若没有查到，则在数据库中查找，若查到请求的地址或名字，即向客户端发出应答信息； 若没有查到，则将请求发给根域 DNS 服务器，并依序从根域查找顶级域，由顶级查找二级域，二级域查找三级，直至找到要解析的地址或名字。然后，向客户端所在网络的 DNS 服务器发出应答信息，DNS 服务器收到应答后，先在缓存中存储，然后，将解析结果发给客户端。 若没有找到，则返回错误信息。 HTTP请求 (一) 三次握手建立TCP连接 &emsp;&emsp;在 http 工作开始之前，浏览器首先要通过网络与服务器建立连接，该连接是通过 TCP 来完成的。该协议与 IP 协议共同构建 Internet ，即著名的 TCP/IP 协议族，因此 Internet 又被称作是 TCP/IP 网络。http 是比 TCP 更高层次的应用层协议。根据规则，只有低层协议建立之后才能进行更高次层协议的连接。因此，首先要建立 TCP 连接，一般 TCP 连接的端口号是 80 。在 TCP/IP 协议中，TCP 协议提供可靠的连接服务，采用三次握手建立一个连接： &emsp;&emsp;1. 第一次握手：建立连接时，客户端发送 SYN 包（syn=j）到服务器，并进入 SYN_SENT 状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers） &emsp;&emsp;2. 第二次握手：服务器收到 SYN 包，必须确认客户的 SYN（ack=j+1），同时自己也发送一个 SYN 包（syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态； &emsp;&emsp;3. 第三次握手：客户端收到服务器的 SYN+ACK 包，向服务器发送确认包 ACK(ack=k+1），此包发送完毕，客户端和服务器进入 ESTABLISHED（TCP连接成功）状态，完成三次握手。 (二) 完成三次握手，客户端与服务器开始传送数据。 &emsp;&emsp;一旦建立了 TCP 连接，浏览器就会向服务器发送 http 请求命令。浏览器发送其请求命令之后，还要以头信息的形式向服务器发送一些别的信息。此后，浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。 (三) 四次挥手终止连接 &emsp;&emsp;由于 TCP 连接是全双工的，因此每个方向都必须单独进行关闭。原则是当一方完成它的数据发送任务后，就能发送一个 FIN 来终止这个方向的连接。收到一个 FIN 只意味着这一方向上没有数据流动。一个 TCP 连接在收到一个 FIN 后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。 &emsp;&emsp;1. 第一次挥手：TCP 客户端发送一个 FIN，用来关闭客户端到服务器的数据传送（客户端向服务器发送一个断开连接的请求）; &emsp;&emsp;2. 第二次挥手：服务器收到这个 FIN，它发回一个 ACK（确认收到请求的信号），确认序号为收到的序号加 1 。和 SYN 一样，一个 FIN 将占用一个序号 (服务器接收到请求之后，发送确认接受到请求的信号); &emsp;&emsp;3. 第三次挥手：服务器关闭客户端的连接，发送一个 FIN 给客户端 (服务器向客户端发送断开的通知); &emsp;&emsp;4. 第四次挥手：客户端发回 ACK 报文确认，并将确认序号设置为收到序号加 1 (客户端接收到断开的通知后断开连接，并反馈一个确认信号，服务器接收到确认信号断开连接)。 服务器的永久重定向响应&emsp;&emsp;服务器会给浏览器返回一个301永久重定向响应服务器给浏览器响应一个 301 永久重定向响应，这样浏览器就会访问http://www.facebook.com/ 而非 http://facebook.com/ 。&emsp;&emsp;为什么服务器一定要重定向而不是直接发会用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。你看，如果一个页面有两个地址，就像 http://www.igoro.com/ 和 http://igoro.com/ ，搜索引擎会认为它们是两个网站，结果造成每一个的搜索链接都减少从而降低排名。而搜索引擎知道 301 永久重定向是什么意思，这样就会把访问带 www 的和不带 www 的地址归到同一个网站排名下。还有一个原因是用不同的地址会造成缓存友好性变差。当一个页面有好几个名字时，它可能会在缓存里出现好几次。 浏览器跟踪重定向地址&emsp;&emsp;浏览器通过 301 知道 http://www.facebook.com 才是要访问的正确地址，所以它会发送另一个获取请求。 服务器处理请求，并返回一个HTTP响应&emsp;&emsp;服务器接收到获取请求并处理，然后返回一个HTTP响应 页面渲染&emsp;&emsp;现代浏览器渲染页面的过程是这样的：解析 html 以构建 DOM 树 –&gt; 构建渲染树 –&gt; 布局渲染树 –&gt; 绘制渲染树DOM 树是由 html 文件中的标签排列组成。 &emsp;&emsp;渲染树是在 DOM 树中加入 css 或 html 中的 style 样式而形成。渲染树只包含需要显示在页面中的 DOM 元素，像 &lt;head&gt;元素或 display 属性值为 none 的元素都不在渲染树中。在浏览器还没接收到完整的 html 文件时，它就开始渲染页面了。 &emsp;&emsp;在遇到外部链入的脚本标签、样式标签、图片时，会再次发送 http 请求重复上述的步骤。在收到 css 文件后，会对已经渲染的页面重新渲染，加入它们应有的样式。图片文件加载完，立刻显示在相应位置。在这一过程中可能会触发页面的重绘或重排。","categories":[],"tags":[{"name":"浏览器","slug":"浏览器","permalink":"http://yoursite.com/tags/浏览器/"}]},{"title":"递归算法","slug":"递归算法","date":"2018-04-11T13:21:29.000Z","updated":"2019-08-13T08:23:02.587Z","comments":true,"path":"2018/04/11/递归算法/","link":"","permalink":"http://yoursite.com/2018/04/11/递归算法/","excerpt":"大家小时候都听过的： 从前有座山，山里有座庙，庙里有个老和尚在和小和尚讲故事，故事讲的是","text":"大家小时候都听过的： 从前有座山，山里有座庙，庙里有个老和尚在和小和尚讲故事，故事讲的是 从前有座山，山里有座庙，庙里有个老和尚在和小和尚讲故事，故事讲的是 从前有座山，山里有座庙，庙里有个老和尚在和小和尚讲故事，故事讲的是 …… 今天的斋饭很好吃. 递归的定义 Wikipedia的定义 Recursion occurs when a thing is defined in terms of itself or of its type. 正式定义 在数学和计算机科学中，递归指由一种（或多种）简单的基本情况定义的一类对象或方法，并规定其他所有情况都能被还原为其基本情况。 对递归的理解&emsp;简单来说，递归就是程序不断的调用自身，递归方法就是方法直接的或者间接的调用自身的方法。&emsp;首先引用一下知乎大佬对递归形象生动的理解: &emsp;&emsp;递归：你打开面前这扇门，看到屋里面还有一扇门（这门可能跟前面打开的门一样大小（静），也可能门小了些（动）），你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门，你继续打开，…， 若干次之后，你打开面前一扇门，发现只有一间屋子，没有门了。 你开始原路返回，每走回一间屋子，你数一次，走到入口的时候，你可以回答出你到底用这钥匙开了几扇门。 递归的设计和特点 &emsp;&emsp;递归就是对问题进行分解，将大问题转换为小问题并用相同的方法进行求解。对于一个调用，它可以导致更多的调用，继续一层一层的调用下去，当问题分解到不能再分解的时候，就需要一个终止条件返回结果给调用者，调用者计算结果并将结果返回给调用这个调用者的调用者，如此返回下去直到结果传给最开始的那个调用者为止。特点： 反复执行的过程（调用自身） 结束反复执行过程的条件（跳出方法的条件） 递归的优缺点 优点： 代码简洁 缺点： 时间耗较大，效率可能会低。递归有很多计算可能是重复的，有时候计算会随着n成指数增长，斐波那契数列就是一个例子。 空间消耗大，可能会导致调用栈溢出。每一次函数调用都需要在内存栈中分配空间，但是每个进程的栈的容量是有限的，当调用的层次太多时，就会超出栈的容量，从而导致栈溢出。 递归常见的算法及应用 递归求n的阶乘 递归求斐波那契数列 递归求n的阶乘 &emsp;&emsp;阶乘：n的阶乘就是所有比n小的正整数的积，定义 0的阶乘为1，n的阶乘为 n! &emsp;&emsp;要想解决这个问题，我们脑子里先回忆一下递归的特点，然后设计出递归的定义和终止条件。 程序返回的结果肯定是当前n的阶乘的值 敲敲黑板 [定义]：假设我们求的是6的阶乘 [6!]，那么我们就必须知道5的阶乘 [5!]，得出 [ 6！= 5！* 6 ]，接下来以此类推。 再次敲敲黑板 [终止条件]：当我们类推到1的时候，我们都知道1的阶乘就等于1 [ 1!=1 ]，所以此时不需要继续类推下去了，直接返回1就好了。 划重点 [整体思路]：用函数f()代表阶乘 [n!] : f(n) = f(n-1)*n; 当n不为1时，函数继续调用自身，并且返回前一个数的阶乘的值；当n为1时，返回1的阶乘，也就是 [return 1]. 当然你也可以选择返回2的阶乘 [2!=2]或者3的阶乘 [3!=6]. 代码实现： 1234567function f(n) &#123; if( n &lt;= 1)&#123; //这里也包括了 当n为0的时候 返回1 [0!=1]; return 1; &#125; else &#123; return f(n-1) * n; &#125;&#125; 递归求斐波那契数列&emsp;&emsp;斐波那契数列：它指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368…… 这个数列从第三项开始，每一项都等于前两项之和。&emsp;&emsp;同样的，我们需要设计这个问题的递归程序的反复执行过程和跳出执行过程的条件： [思路]: 首先，这个递归程序是需要返回斐波那契数列中的第n个数的值&emsp;&emsp;当求[n=6]时，我们需要知道 [n=5] 和 [n=4] 的和，&emsp;&emsp;当[n=5]时，我们要知道 [n=4] 和 [n=3] 的和，&emsp;&emsp;当[n=4]时，我们要知道 [n=3] 和 [n=2] 的和，&emsp;&emsp;类推下去…&emsp;&emsp;当[n=1]或者[n=2]，我们是知道这两项的值的，所以直接返回1.敲黑板[递归程序]：fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)&emsp;&emsp;当 n==1 或者 n==2 时，程序直接返回1.&emsp;&emsp;当 n!=1 且 n!=2 时，程序返回 fibonacci(n-1) + fibonacci(n-2). 代码实现： 1234567function fibonacci(n) &#123; if( n == 1 || n == 2)&#123; //当 n==1 或者 n==2 时，程序直接返回1.; return 1; &#125; else &#123; return fibonacci(n-1) + fibonacci(n-2); //当 n!=1 且 n!=2 时，程序返回 fibonacci(n-1) + fibonacci(n-2). &#125;&#125;","categories":[],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://yoursite.com/tags/Algorithm/"}]}]}